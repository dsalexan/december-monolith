import assert from "assert"
import { MaybeUndefined, NonNil } from "tsdef"
import { set, get, isNil, isString, cloneDeep } from "lodash"

import SymbolTable from "@december/tree/environment/symbolTable"
import { Processor, Environment, ProcessedData, Simbol, ObjectSourceData } from "@december/tree"
import { UnitManager } from "@december/utils/unit"
import { PropertyReferencePattern } from "@december/utils/access"

import MutableObject from "../object"

import { resolveTargetEvent, type ProxyListenerOptions, type Strategy } from "../controller/strategy"
import { GenericMutationFrame } from "../controller/frameRegistry"
import { IntegrityEntry } from "../controller/integrityRegistry"
import { PROPERTY_UPDATED } from "../controller/eventEmitter/event"
import { BareExecutionContext } from "../controller/callQueue"
import { createListener, GenericListener, getListenerID, Listener } from "../controller/eventEmitter/listener"

export interface ProcessorOptions {
  unitManager: UnitManager
}

/** Creates a new Processor instance */
export function makeProcessor(options: ProcessorOptions): Processor {
  const processor = new Processor()

  const grammar = processor.makeGrammar(options.unitManager)

  processor.initialize(grammar)

  return processor
}

// PROCESSING THINGS
// export type IsProxiableIdentifier = (symbol: Simbol) => boolean
// export type IdentifierSymbolToPropertyPattern = (symbol: Simbol, translationTable: ProcessingSymbolTranslationTable) => PropertyReferencePattern
export type SymbolListenableChecker = (symbol: Simbol) => boolean
export type PropertyPatternsFromSymbolGetter = (symbol: Simbol, translationTable: ProcessingSymbolTranslationTable) => PropertyReferencePattern[]

export interface ProcessingSymbolsOptions {
  // isProxiableIdentifier: IsProxiableIdentifier
  // identifierSymbolToPropertyPattern: IdentifierSymbolToPropertyPattern
  canListenToSymbol: SymbolListenableChecker
  getPropertyPatternsFromSymbol: PropertyPatternsFromSymbolGetter
}

// Basically converts a symbol to something proxiable
export type SymbolTranslationValue = string

export class ProcessingSymbolTranslationTable {
  table: Record<Simbol[`value`], SymbolTranslationValue> // value -> translation
  fns: ((symbol: Simbol) => SymbolTranslationValue)[] = []

  constructor(table: Record<string, SymbolTranslationValue> = {}) {
    this.table = {}
    for (const [key, value] of Object.entries(table)) this.set(key, value)
  }

  public set(key: string, value: SymbolTranslationValue): this {
    assert(!isNil(value), `Symbol translation value cannot be nil`)

    this.table[key] = value

    return this
  }

  public add(fn: (symbol: Simbol) => SymbolTranslationValue): this {
    this.fns.push(fn)

    return this
  }

  public has(symbol: Simbol): boolean {
    return !isNil(this.table[symbol.value]) || this.fns.some(fn => !isNil(fn(symbol)))
  }

  public get(symbol: Simbol): MaybeUndefined<SymbolTranslationValue> {
    const values: SymbolTranslationValue[] = []

    const fromTable = this.table[symbol.value]
    if (!isNil(fromTable)) values.push(fromTable)

    for (const fn of this.fns) {
      const fromFunction = fn(symbol)
      if (!isNil(fromFunction)) values.push(fromFunction)
    }

    assert(values.length <= 1, `Symbol "${symbol.value}" has more than one translation`)

    return values[0]
  }

  /** Returns a collection of symbols with the same value */
  public getSymbolCollection(): Simbol[][] {
    const collection: Simbol[][] = []

    for (const key of Object.keys(this.table)) {
      const fakeSymbol: Simbol = {
        node: null as any,
        content: null as any,
        value: key,
      }

      collection.push([fakeSymbol])
    }

    return collection
  }
}

export class ProcessingPackage {
  object: MutableObject
  path: ProcessingPath
  reProcessingFunction: ReProcessingFunction
  environment: Environment
  translationTable: ProcessingSymbolTranslationTable

  constructor(object: MutableObject, expressionPath: string, targetPath: string, reProcessingFunction: ReProcessingFunction | string, environment: Environment, translationTable: ProcessingSymbolTranslationTable) {
    const name = isString(reProcessingFunction) ? reProcessingFunction : reProcessingFunction.name
    const args = isString(reProcessingFunction) ? {} : reProcessingFunction.arguments

    this.object = object
    this.path = { expression: expressionPath, target: targetPath }
    this.reProcessingFunction = { name, arguments: args }
    this.environment = environment
    this.translationTable = translationTable
  }

  public clone(): ProcessingPackage {
    return new ProcessingPackage(this.object, this.path.expression, this.path.target, { name: this.reProcessingFunction.name, arguments: this.reProcessingFunction.arguments }, this.environment, this.translationTable)
  }

  public setPath(expressionPath: string, targetPath: string): ProcessingPackage {
    const pkg = this.clone()
    pkg.path.expression = expressionPath
    pkg.path.target = targetPath

    return pkg
  }

  public setEnvironment(environment: Environment) {
    const pkg = this.clone()
    pkg.environment = environment

    return pkg
  }

  public setTranslationTable(translationTable: ProcessingSymbolTranslationTable) {
    const pkg = this.clone()
    pkg.translationTable = translationTable

    return pkg
  }
}

// READY PROCESSING
export interface ReadyBaseProcessedReturn {
  isReady: true
  processor: Processor
  data: ProcessedData
}

// NON-READY PROCESSING

export type ReProcessingFunction = {
  name: GenericMutationFrame[`name`]
  arguments: NonNil<BareExecutionContext[`arguments`]>
}

export interface NonReadyBaseProcessedReturn {
  isReady: false
  processor: Processor
  data: ProcessedData
  //
  listenForSymbols: (symbolTable: SymbolTable, reProcessingFunction?: ReProcessingFunction | string) => Listener[]
}

// STATE
export interface ProcessingPath {
  expression: string
  target: string
}

export interface ProcessingState {
  id: string
  package: ProcessingPackage
  processor: Processor
  integrityEntries: IntegrityEntry[]
  //
  isReady: boolean
  symbols: Record<Simbol[`content`], { symbols: Simbol[]; listened: boolean }>
}

/** Function to listen for symbols from symbol table */
export function listenForSymbolsGenerator(state: ProcessingState, options: ProcessingSymbolsOptions) {
  return (symbolTable: SymbolTable, reProcessingFunction: ReProcessingFunction | string = `compute:re-processing`) => {
    // 1. Get all symbols that can be listened to
    const tableSymbols = symbolTable.filter(symbol => {
      return state.package.translationTable.has(symbol) || options.canListenToSymbol(symbol)
    })

    // 2. Store and listen to new symbols
    for (const simbol of tableSymbols) {
      const key = simbol.value

      // 3. Store symbol
      if (!state.symbols[key]) state.symbols[key] = { symbols: [simbol], listened: false }
      else if (!state.symbols[key].symbols.find(symbol => symbol.node.id !== simbol.node.id)) state.symbols[key].symbols.push(simbol)

      if (!state.symbols[key].listened) {
        // 4. Parse re-processing function name and arguments
        const name = isString(reProcessingFunction) ? reProcessingFunction : reProcessingFunction.name
        const args = isString(reProcessingFunction) ? {} : reProcessingFunction.arguments

        // 5. Update state
        state.symbols[key].listened = true

        // 6. Create listeners for symbol
        const object = state.package.object
        const propertyPatterns = options.getPropertyPatternsFromSymbol(simbol, state.package.translationTable)

        const genericListener: GenericListener = {
          // handle self properties (should be any here, thou)
          targetEvent: resolveTargetEvent(object, PROPERTY_UPDATED(...propertyPatterns)),
          // enqueue re-processing function on event (i.e. when any of the properties tied to symbol is updated)
          callback: (event, { eventEmitter }) => {
            eventEmitter.controller.callQueue.enqueue(object.reference(), {
              eventDispatcher: event,
              name,
              arguments: { ...args, state },
            })
          },
          // if any integrity entry changes, kill this listener
          integrityEntries: state.integrityEntries,
        }

        // 7. Return full listener
        return [createListener(object.id, genericListener)]
      }
    }

    return []
  }
}

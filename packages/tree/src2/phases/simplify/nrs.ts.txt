import { simplify } from "mathjs"
// @ts-nocheck

import { flow } from "fp-ts/lib/function"

import { EQUALS } from "@december/utils/match/element"
import { AND, OR } from "@december/utils/match/logical"
import { MULTIPLICATION, SIGN } from "../../type/declarations/operator"
import { NUMBER, QUANTITY, STRING, UNIT } from "../../type/declarations/literal"
import { TYPE, NODE, NodePattern } from "../../match/pattern"

import { KEEP_NODE, REMOVE_NODE, REPLACE_NODES_AT } from "../../nrs/system"
import { Rule, leftOperand, match, matchInChildren, nextSibling, predicate, filter, ADD_NODE_AT, offspringAt, rightOperand, parent } from "../../nrs/rule"

import { RuleSet } from "../../nrs/rule/rule"
import assert from "assert"
import Token from "../../token"
import Node from "../../node"
import { CONTAINS } from "../../../../utils/src/match/set"
import { NOT } from "../../../../utils/src/match/base"
import { last } from "lodash"

// export const BASE_RULESET: Rule[] = []
export const RULESET = new RuleSet(`simplify`)

// #region SIMPLIFY QUANTITIES

RULESET.add(
  `-_1q -> (-_1)q`, //
  flow(
    match(TYPE.NAME(EQUALS(`sign`))), // "+" or "-"
    flow(leftOperand, match(TYPE.NAME(EQUALS(`quantity`)))), // left === quantity
  ),
  node => {
    const signToken = node.tokens[0]
    const sign = signToken.lexeme === `-` ? -1 : 1

    const quantity = node.children.get(0)
    const value = quantity.children.get(0)

    quantity.updateFallbackRange(node.range)
    quantity.children.remove(value.index, { refreshIndexing: false })

    const newSign = Node.fromToken(signToken, SIGN)
    quantity.children.add(newSign, null, { refreshIndexing: false })
    newSign.children.add(value, null, { refreshIndexing: true })

    return quantity
  },
)

RULESET.add(
  `_Literal*Quantity -> Quantity*_Literal`, //
  flow(
    match(OR<NodePattern>(TYPE.NAME(EQUALS(`addition`)), TYPE.NAME(EQUALS(`multiplication`)))), // "+"" or "*"
    predicate(node => node.children.length === 2), // two operands
    flow(leftOperand, match(AND<any>(OR<NodePattern>(TYPE.ID(EQUALS(`literal`)), TYPE.MODULE(CONTAINS(`literal:like`))), TYPE.NAME(NOT(EQUALS(`quantity`))))), parent), // left === literal (non-quantity)
    flow(rightOperand, match(TYPE.NAME(EQUALS(`quantity`))), parent), // right === quantity
  ),
  node => {
    node.children.nodes[0].swapWith(node.children.nodes[1])

    return KEEP_NODE()
  },
)

RULESET.add(
  `_1q+_2q -> (_1+_2)q || _1q*_2 -> (_1*_2)q`, //
  flow(
    match(OR<NodePattern>(TYPE.NAME(EQUALS(`addition`)), TYPE.NAME(EQUALS(`multiplication`)))), // "+"" or "*"
    flow(leftOperand, match(TYPE.NAME(EQUALS(`quantity`))), parent), // left === quantity
    predicate(node => {
      const [left, right] = node.children.nodes

      // _1q+_2q -> (_1+_2)q
      if (right?.type.name === `quantity`) {
        return left.attributes.unit!.isEquals(right.attributes.unit!)
      }

      // _1q*_2 -> (_1*_2)q
      else if (right?.type.isLiteralLike()) {
        return true
      }

      return false
    }),
    // flow(rightOperand, match(TYPE.NAME(EQUALS(`quantity`))), parent), // right === quantity
    // predicate(node => {
    //   const [left, right] = node.children.nodes

    //   return left.attributes.unit!.isEquals(right.attributes.unit!)
    // }),
  ),
  node => {
    /**
     * I)  _1q+_2q -> (_1+_2)q
     * II) _1q*_2 -> (_1*_2)q
     */
    const [A, B] = node.children.nodes

    const isI = B.type.name === `quantity`
    const isII = B.type.name !== `quantity`

    const index = node.index
    const parent = node.parent!

    const unit = new Token({ type: `concrete`, value: last(A.tokens)!.lexeme }, STRING)
    unit.setAttributes({ traversalIndex: -1 })

    const quantity = new Node(unit)
    quantity.setType(QUANTITY)

    const opener = new Token({ type: `concrete`, value: `(` }, STRING)
    const closer = new Token({ type: `concrete`, value: `)` }, STRING)

    opener.setAttributes({ traversalIndex: 0 })
    closer.setAttributes({ traversalIndex: -2 })

    quantity.addToken([opener, closer], 0)

    const unitOfMeasurement = A.attributes.unit!
    quantity.setAttributes({ unit: unitOfMeasurement })

    // add quantities values to new operator
    const operator = Node.fromToken(node.tokens[0], node.type)
    operator.setAttributes({ originalNodes: [node.clone()] })

    operator.children.add(A.children.get(0), null, { refreshIndexing: false })
    operator.children.add(isI ? B.children.get(0) : B, null, { refreshIndexing: false })

    // add operator do master quantity
    quantity.children.add(operator, null, { refreshIndexing: false })

    return quantity
  },
)

// #endregion

// #region SIMPLIFY ENCLOSURES

RULESET.add(
  `(Operator) -> Operator`, //
  flow(
    match(TYPE.ID(EQUALS(`enclosure`))), //
    leftOperand,
    match(TYPE.ID(EQUALS(`operator`))),
  ),
  node => node.children.nodes[0],
)

// #endregion

//             addRule( new TARuleFromString( '0+_1', '_1' ) );
RULESET.add(
  `0+_1 -> _1`, //
  flow(
    match(TYPE.NAME(EQUALS(`addition`))), // "+"
    leftOperand,
    match(AND(TYPE.FULL(EQUALS(`literal:number`)), NODE.CONTENT(EQUALS(`0`)))), // left === "0"
  ),
  node => node.children.nodes[1],
)

//             addRule( new TARuleFromString( '_Literal2=0-_1', '_1=0-_Literal2' ) );
//                push literal to rightmost
RULESET.add(
  `_Literal2=0-_1 -> _1=0-_Literal2`, //
  [
    flow(match(TYPE.NAME(EQUALS(`equals`)))), // "="
    flow(leftOperand, match(OR<NodePattern>(TYPE.ID(EQUALS(`literal`)), TYPE.MODULE(CONTAINS(`literal:like`))))), // left === _Literal2
    flow(rightOperand, match(TYPE.NAME(EQUALS(`subtraction`)))), // right === "-"
    flow(
      rightOperand, // right >
      leftOperand, // right > left
      match(AND(TYPE.FULL(EQUALS(`literal:number`)), NODE.CONTENT(EQUALS(`0`)))), // right > left === "0"
    ),
  ],
  // _Literal2 = 0 - XXXXXXXXX
  (node: Node, state) => {
    // node.tree.swap(node.children.nodes[0], node.children.nodes[1].children.nodes[1])
    node.children.nodes[0].swapWith(node.children.nodes[1].children.nodes[1])

    return KEEP_NODE()
  },
)

//             addRule( new TARuleFromString( '_1+0', '_1' ) );
RULESET.add(
  `_1 -> 0+_1`, //
  flow(
    match(TYPE.NAME(EQUALS(`addition`))), // "+"
    rightOperand,
    match(AND(TYPE.FULL(EQUALS(`literal:number`)), NODE.CONTENT(EQUALS(`0`)))), // right === "0"
  ),
  node => node.children.nodes[0],
)

//             addRule( new TARuleFromString( '1*_1', '_1' ) );
RULESET.add(
  `1*_1 -> _1`, //
  flow(
    match(TYPE.NAME(EQUALS(`multiplication`))), // "*"
    leftOperand,
    match(AND(TYPE.FULL(EQUALS(`literal:number`)), NODE.CONTENT(EQUALS(`1`)))), // left === "1"
  ),
  node => node.children.nodes[1],
)

//             addRule( new TARuleFromString( '_1*1', '_1' ) );
RULESET.add(
  `_1*1 -> _1`, //
  flow(
    match(TYPE.NAME(EQUALS(`multiplication`))), // "*"
    rightOperand,
    match(AND(TYPE.FULL(EQUALS(`literal:number`)), NODE.CONTENT(EQUALS(`1`)))), // right === "1"
  ),
  node => node.children.nodes[0],
)

//             addRule( new TARuleFromString( '_1+_1', '2*_1' ) );
RULESET.add(
  `_1+_1 -> 2*_1`, //
  flow(
    match(TYPE.NAME(EQUALS(`addition`))), // "+"
    predicate(node => node.children.length === 2), // two operands
    predicate(node => node.children.nodes[0].content === node.children.nodes[1].content), // left === right
  ),
  node => {
    // TODO: Improve this mess (it works thou)

    const [left, right] = node.children.nodes

    node.setType(MULTIPLICATION) // "+" -> "*"

    assert(node.tokens.length === 1, `Too many tokens`)
    const [plus] = node.tokens

    debugger

    // const originalExpression = plus.expression

    // // 1. Update expression (partial only to correct for operator change)
    // const before1 = originalExpression.substring(0, plus.interval.start)
    // const after1 = originalExpression.substring(plus.interval.start + plus.interval.length)
    // const newExpression1 = before1 + `*` + after1
    // plus.updateExpression(newExpression1)

    // const twoToken = new Token(plus.grammar, { start: left.range.column(`first`), length: 1, type: NUMBER })
    // const before2 = originalExpression.substring(0, twoToken.interval.start)
    // const after2 = originalExpression.substring(plus.interval.start + plus.interval.length)
    // const newExpression2 = before2 + `2` + `*` + after2
    // twoToken.updateExpression(newExpression2)

    // const two = new Node(twoToken)

    // // tree.replaceWith(...)
    // node._removeChildAt(0, true) // remove left from node
    // node._addChild(two, 0) // add two to node as left

    return node
  },
)

//             addRule( new TARuleFromString( '_1-_1', '0' ) );
RULESET.add(
  `_1-_1 -> 0`, //
  flow(
    match(TYPE.NAME(EQUALS(`subtraction`))), // "-"
    predicate(node => node.children.length === 2), // two operands
    predicate(node => node.children.nodes[0].content === node.children.nodes[1].content), // left === right
  ),
  node => {
    // TODO: Probably should work on the calculations part (since comparing lexemes is not really what I want for this rule)

    return Node.fromToken(`0`, NUMBER)
  },
)

//             addRule( new TARuleFromString( '_1/_1', '1' ) );

//             // Rate = (pow((EndValue / BeginValue), (1 / (EndYear - BeginYear)))-1) * 100

//             addRule( new TARuleFromString( 'exp(_Literal1) * exp(_Literal2 )', 'exp( _Literal1 + _Literal2 )' ) );
//             addRule( new TARuleFromString( 'exp( 0 )', '1' ) );

//             addRule( new TARuleFromString( 'pow(_Literal1,_1) * pow(_Literal2,_1)', 'pow(_Literal1 * _Literal2,_1)' ) );
//             addRule( new TARuleFromString( 'pow( _1, 0 )', '1' ) );
//             addRule( new TARuleFromString( 'pow( _1, 1 )', '_1' ) );
//             addRule( new TARuleFromString( 'pow( _1, -1 )', '1/_1' ) );
//             addRule( new TARuleFromString( 'pow( pow( _1, _Literal1 ), _Literal2 )', 'pow( _1, _Literal1 * _Literal2 )' ) );

// //          addRule( new TARuleFromString( 'pow( _Literal1, _1 )', 'ln(_1) / ln(_Literal1)' ) );
//             addRule( new TARuleFromString( '_literal1 = pow( _Literal2, _1 )', '_1 = ln(_literal1) / ln(_Literal2)' ) );
//             addRule( new TARuleFromString( 'pow( _Literal2, _1 ) = _literal1 ', '_1 = ln(_literal1) / ln(_Literal2)' ) );

//             addRule( new TARuleFromString( 'pow( _1, _Literal2 ) = _literal1 ', 'pow( _literal1, 1 / _Literal2 ) = _1' ) );

//             addRule( new TARuleFromString( 'pow( 1, _1 )', '1' ) );

//             addRule( new TARuleFromString( '_1 * _1 = _literal', '_1 = sqrt( _literal )' ) );

//             addRule( new TARuleFromString( 'sqrt( _literal * _1 )', 'sqrt( _literal ) * sqrt( _1 )' ) );

//             addRule( new TARuleFromString( 'ln( _Literal1 * _2 )', 'ln( _Literal1 ) + ln( _2 )' ) );
//             addRule( new TARuleFromString( 'ln( _1 * _Literal2 )', 'ln( _Literal2 ) + ln( _1 )' ) );
//             addRule( new TARuleFromString( 'log2( _Literal1 * _2 )', 'log2( _Literal1 ) + log2( _2 )' ) );
//             addRule( new TARuleFromString( 'log2( _1 * _Literal2 )', 'log2( _Literal2 ) + log2( _1 )' ) );
//             addRule( new TARuleFromString( 'log10( _Literal1 * _2 )', 'log10( _Literal1 ) + log10( _2 )' ) );
//             addRule( new TARuleFromString( 'log10( _1 * _Literal2 )', 'log10( _Literal2 ) + log10( _1 )' ) );

//             addRule( new TARuleFromString( 'ln( _Literal1 / _2 )', 'ln( _Literal1 ) - ln( _2 )' ) );
//             addRule( new TARuleFromString( 'ln( _1 / _Literal2 )', 'ln( _Literal2 ) - ln( _1 )' ) );
//             addRule( new TARuleFromString( 'log2( _Literal1 / _2 )', 'log2( _Literal1 ) - log2( _2 )' ) );
//             addRule( new TARuleFromString( 'log2( _1 / _Literal2 )', 'log2( _Literal2 ) - log2( _1 )' ) );
//             addRule( new TARuleFromString( 'log10( _Literal1 / _2 )', 'log10( _Literal1 ) - log10( _2 )' ) );
//             addRule( new TARuleFromString( 'log10( _1 / _Literal2 )', 'log10( _Literal2 ) - log10( _1 )' ) );

//             addRule( new TARuleFromString( '_Literal1 = _NonLiteral + _Literal2', '_Literal1 - _Literal2 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_Literal1 = _NonLiteral * _Literal2', '_Literal1 / _Literal2 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_Literal1 = _NonLiteral / _Literal2', '_Literal1 * _Literal2 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_Literal1 =_NonLiteral - _Literal2',  '_Literal1 + _Literal2 = _NonLiteral' ) );

//             addRule( new TARuleFromString( '_NonLiteral + _Literal2 = _Literal1 ', '_Literal1 - _Literal2 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_NonLiteral * _Literal2 = _Literal1 ', '_Literal1 / _Literal2 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_NonLiteral / _Literal2 = _Literal1 ', '_Literal1 * _Literal2 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_NonLiteral - _Literal2 = _Literal1',  '_Literal1 + _Literal2 = _NonLiteral' ) );

//             addRule( new TARuleFromString( '_NonLiteral - _Literal2 = _Literal1 ', '_Literal1 + _Literal2 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_Literal2 - _NonLiteral = _Literal1 ', '_Literal2 - _Literal1 = _NonLiteral' ) );

//             addRule( new TARuleFromString( '_Literal1 = sin( _NonLiteral )', 'asin( _Literal1 ) = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_Literal1 = cos( _NonLiteral )', 'acos( _Literal1 ) = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_Literal1 = tan( _NonLiteral )', 'atan( _Literal1 ) = _NonLiteral' ) );

//             addRule( new TARuleFromString( '_Literal1 = ln( _1 )', 'exp( _Literal1 ) = _1' ) );
//             addRule( new TARuleFromString( 'ln( _1 ) = _Literal1', 'exp( _Literal1 ) = _1' ) );

//             addRule( new TARuleFromString( '_Literal1 = _NonLiteral', '_NonLiteral = _Literal1' ) );

//             addRule( new TARuleFromString( '( _Literal1 / _2 ) = _Literal2', '_Literal1 / _Literal2 = _2 ' ) );

//             addRule( new TARuleFromString( '_Literal*_NonLiteral', '_NonLiteral*_Literal' ) );
//             addRule( new TARuleFromString( '_Literal+_NonLiteral', '_NonLiteral+_Literal' ) );
RULESET.add(
  `_Literal+_NonLiteral -> _NonLiteral+_Literal`, //
  flow(
    match(OR<NodePattern>(TYPE.NAME(EQUALS(`addition`)), TYPE.NAME(EQUALS(`multiplication`)))), // "+"" or "*"
    predicate(node => node.children.length === 2), // two operands
    flow(leftOperand, match(OR<NodePattern>(TYPE.ID(EQUALS(`literal`)), TYPE.MODULE(CONTAINS(`literal:like`)))), parent), // left === literal
    flow(rightOperand, match(AND<NodePattern>(TYPE.ID(NOT(EQUALS(`literal`))), TYPE.MODULE(NOT(CONTAINS(`literal:like`))))), parent), // right === non-literal
    // predicate(node => {
    //   const [left, right] = node.children.nodes

    //   return !right.type.isLiteralLike()
    // }),
  ),
  node => {
    node.children.nodes[0].swapWith(node.children.nodes[1])

    return KEEP_NODE()
  },
)

//             addRule( new TARuleFromString( '_Literal1+(_Literal2+_NonLiteral)', '_NonLiteral+(_Literal1+_Literal2)' ) );
RULESET.add(
  `_Literal1+(_Literal2+_NonLiteral) || _Literal1+(_NonLiteral+_Literal2) || (_NonLiteral+_Literal1)+_Literal2 -> _NonLiteral+(_Literal1+_Literal2)`, //
  flow(
    match(OR<NodePattern>(TYPE.NAME(EQUALS(`addition`)), TYPE.NAME(EQUALS(`multiplication`)))), // "+"" or "*"
    predicate(node => node.children.length === 2), // two operands
    predicate(node => {
      const [left, right] = node.children.nodes

      // I) _Literal1+(_Literal2+_NonLiteral)
      if (left.type.isLiteralLike() && sameType(right, node) && right.children.length === 2) {
        const [LB, C] = right.children.nodes
        if (LB.type.isLiteralLike() && C.type.id !== `literal`) return true
      }

      // II) (_NonLiteral+_Literal1)+_Literal2
      if (right.type.isLiteralLike() && sameType(left, node) && left.children.length === 2) {
        const [A, LB] = left.children.nodes
        if (LB.type.isLiteralLike() && A.type.id !== `literal`) return true
      }

      // III) _Literal1+(_NonLiteral+_Literal2)
      if (left.type.isLiteralLike() && sameType(right, node) && right.children.length === 2) {
        const [B, LC] = right.children.nodes
        if (LC.type.isLiteralLike() && B.type.id !== `literal`) return true
      }

      return false
    }),
  ),
  node => {
    /**
     * I)  _Literal1+(_Literal2+_NonLiteral)
     * II) (_NonLiteral+_Literal1)+_Literal2
     * III) _Literal1+(_NonLiteral+_Literal2)
     */

    const [left, right] = node.children.nodes

    const isI = left.type.isLiteralLike() && right.type.isLiteralLike()
    const isII = left.type.id !== `literal`
    const isIII = left.type.isLiteralLike() && right.type.id !== `literal`

    if (isI) {
      const A = left
      const [B, C] = right.children.nodes

      // LA + (LB + C) -> C + (LA + LB)

      A.swapWith(C) // LA + (LB + C) -> C + (LB + LA)
      B.swapWith(A) //  C + (LB + LA) -> C + (LA + LB)
    } else if (isII) {
      const [A, B] = left.children.nodes
      const C = right

      // (A + LB) + LC -> A + (LB + LC)

      left.swapWith(C) // (A + LB) + LC -> LC + (A + LB)
      C.swapWith(A) // LC + (A + LB) -> A + (LC + LB)
      B.swapWith(C) // A + (LC + LB) -> A + (LB + LC)
    } else {
      const A = left
      const [B, C] = right.children.nodes

      // LA + (B + LC) -> B + (LA + LC)

      A.swapWith(B) // LA + (B + LC) -> B + (LA + LC)
    }

    return KEEP_NODE()
  },
)

//             addRule( new TARuleFromString( '_Literal1+(_Literal2+_1)', '_1+(_Literal1+_Literal2)' ) );

//             addRule( new TARuleFromString( '(_1*_2)+(_3*_2)', '(_1+_3)*_2' ) );
//             addRule( new TARuleFromString( '(_2*_1)+(_2*_3)', '(_1+_3)*_2' ) );

//             addRule( new TARuleFromString( '(_2*_1)+(_3*_2)', '(_1+_3)*_2' ) );
//             addRule( new TARuleFromString( '(_1*_2)+(_2*_3)', '(_1+_3)*_2' ) );

//             addRule( new TARuleFromString( '(_Literal * _1 ) / _Literal', '_1' ) );
//             addRule( new TARuleFromString( '(_Literal1 * _1 ) / _Literal2', '(_Literal1 * _Literal2 ) / _1' ) );

//             addRule( new TARuleFromString( '(_1+_2)+_3', '_1+(_2+_3)' ) );
//             addRule( new TARuleFromString( '(_1*_2)*_3', '_1*(_2*_3)' ) );
RULESET.add(
  `(_1+_2)+_3 -> _1+(_2+_3)`, //
  flow(
    // match(AND<NodePattern>(TYPE.ID(EQUALS(`operator`)), TYPE.MODULE(CONTAINS(`arithmetic`)))), // +, -, *, /
    match(OR<NodePattern>(TYPE.NAME(EQUALS(`addition`)), TYPE.NAME(EQUALS(`multiplication`)))), // "+"" or "*"
    predicate(node => node.children.length === 2), // two operands
    predicate(node => {
      const [left, right] = node.children.nodes

      if (left.type.getFullName() === node.type.getFullName()) return left.children.length === 2

      return false
    }),
  ),
  node => {
    const [left, C] = node.children.nodes
    const [A, B] = left.children.nodes

    left.swapWith(C) // (A + B) + C -> C + (A + B)
    C.swapWith(A) // C + (A + B) -> A + (C + B)
    C.swapWith(B) // A + (C + B) -> A + (B + C)

    return KEEP_NODE()
  },
)

//             addRule( new TARuleFromString( '_1+(_1+_2)', '(2*_1)+_2' ) );

//             addRule( new TARuleFromString( '_1+_2*_1', '(1+_2)*_1' ) );

//             addRule( new TARuleFromString( '_literal1 * _NonLiteral = _literal2', '_literal2 / _literal1 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_literal1 + _NonLiteral = _literal2', '_literal2 - _literal1 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_literal1 - _NonLiteral = _literal2', '_literal1 - _literal2 = _NonLiteral' ) );
//             addRule( new TARuleFromString( '_literal1 / _NonLiteral = _literal2', '_literal1 * _literal2 = _NonLiteral' ) );

export default [RULESET]

function sameType(node: Node, parent: Node) {
  return node.type.getFullName() === parent.type.getFullName()
}

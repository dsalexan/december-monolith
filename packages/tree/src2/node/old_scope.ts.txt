import assert from "assert"
import { isString } from "lodash"

import { inContext } from "./traversal"

import { Node } from "./node/base"

export const MASTER_SCOPES = [`math`, `text-processing`] as const

export type MasterScope = (typeof MASTER_SCOPES)[number]
export type GenericScope = `string` | `possible-string`
export type Scope = MasterScope | GenericScope

export interface ScopeInstruction {
  type: `add` | `remove`
  values: Scope[]
}

export type ScopeEvaluation = Scope | ScopeInstruction

export type ScopeEvaluator = (node: Node, source: Node, ancestors: Node[]) => ScopeEvaluation[]

export class ScopeManager1 {
  public scopes: {
    master: MasterScope[]
    local: Scope[]
  } = {
    master: [],
    local: [],
  }

  public evaluators: ScopeEvaluator[] = []

  constructor(...masterScopes: MasterScope[]) {
    this.evaluators.push(masterScopeEvaluator(...masterScopes))
    this.evaluators.push(defaultScopeEvaluator)
  }

  addEvaluator(...evaluators: ScopeEvaluator[]) {
    for (const evaluator of evaluators) this.evaluators.push(evaluator)

    return this
  }

  public evaluate(node: Node): Scope[] {
    const scopes: Scope[] = []

    const nodes: Node[] = []
    inContext(node, node => nodes.push(node))

    // artifically add root node if necessary
    if (!nodes.find(node => node.type.name === `root`)) nodes.push(node.root)

    // if (node.type.name === `whitespace`) debugger

    for (const ancestor of nodes) {
      // for eache evaluator in manager
      for (const evaluator of this.evaluators) {
        const evaluations = evaluator(ancestor, node, nodes)

        // for each scope OR instruction in evaluation
        for (const _evaluation of evaluations) {
          const instruction: ScopeInstruction = isString(_evaluation) ? { type: `add`, values: [_evaluation] } : _evaluation

          if (instruction.type === `add`) {
            for (const tag of instruction.values) if (!scopes.includes(tag)) scopes.push(tag)
          } else if (instruction.type === `remove`) {
            debugger
          } else throw new Error(`Invalid instruction type "${instruction.type}"`)
        }
      }
    }

    return scopes
  }
}

type TMasterScopeEvaluator = (...masterScopes: MasterScope[]) => ScopeEvaluator
const masterScopeEvaluator: TMasterScopeEvaluator =
  (...masterScopes) =>
  node =>
    node.type.name === `root` ? [...masterScopes] : []

const defaultScopeEvaluator: ScopeEvaluator = (node, source, ancestors) => {
  if (node.type.name === `quotes`) return [`string`]
  if (node.type.name === `string`) return [`string`]
  if (node.type.name === `list`) {
    const children = node.children
    const types = children.map(child => child.type)

    const certainlyWhitespaceContext = types.every(type => type.name === `whitespace`)
    const certainlyStringContext = !certainlyWhitespaceContext && types.every(type => type.name === `string` || type.name === `quotes` || type.name === `whitespace`)
    const possiblyStringContext =
      !certainlyWhitespaceContext &&
      types.every(
        type =>
          // CERTAINLY STRING
          type.name === `string` ||
          type.name === `quotes` ||
          type.name === `whitespace` ||
          // POSSIBLY STRING
          type.id === `enclosure` ||
          type.id === `literal`,
      )

    if (source.type.name === `whitespace`) debugger

    if (certainlyStringContext) return [`string`]
    else if (possiblyStringContext) return [`possible-string`]
  }

  return []
}

export function getMasterScope(scopes: Scope[]): MasterScope {
  const masterScopes = scopes.filter(scope => MASTER_SCOPES.includes(scope as MasterScope)) as MasterScope[]

  assert(masterScopes.length === 1, `Too many master scopes "${masterScopes.join(`, `)}"`)

  return masterScopes[0]
}
